# -*- coding: utf-8 -*-
import dolCallEnum
from ctypes import *
import win32con, win32api, win32process, win32event, win32security
import random, math
kernel32 = windll.kernel32
VirtualAllocEx = kernel32.VirtualAllocEx
VirtualFreeEx = kernel32.VirtualFreeEx
LoadLibraryA = kernel32.LoadLibraryA
WriteProcessMemory = kernel32.WriteProcessMemory

class TW:
    followCmd = [0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0x56,0x57,0xC7,0x45,0x08,0x30,0xF1,0x7B,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF8,0x89,0x55,0xFC,0x8B,0x7D,0xF8,0x57,0xBE,0x00,0x00,0x00,0x00,0x56,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x5F,0x5E,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0xA0,0xFE,0x7B,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x0F,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x40,0xAF,0x42,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0xB9,0xD0,0xB7,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x10,0x8B,0x45,0x08,0xC7,0x45,0x08,0x40,0x9A,0x7C,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF8,0x8B,0x48,0x08,0x89,0x55,0xF4,0x8B,0x50,0x0C,0x89,0x4D,0xF0,0x89,0x55,0xFC,0xB8,0x38,0x38,0x38,0x38,0xB9,0x68,0xD3,0xAF,0x00,0x89,0x01,0x51,0xFF,0x75,0xF0,0xFF,0x75,0xF4,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x06,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0xC7,0x45,0x08,0x30,0xF7,0x7B,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xFC,0x89,0x55,0xF8,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x08,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x0C,0x8B,0x45,0x08,0xC7,0x45,0x08,0x30,0xF1,0x7B,0x00,0x8B,0x08,0x8B,0x50,0x04,0x8B,0x40,0x08,0x89,0x4D,0xF4,0x89,0x55,0xF8,0x89,0x45,0xFC,0xFF,0x75,0xF4,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x10,0x89,0x78,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x14,0x8B,0x45,0x08,0xC7,0x45,0x08,0x40,0x01,0x7C,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xEC,0x8B,0x48,0x08,0x89,0x55,0xF0,0x8B,0x50,0x0C,0x8B,0x40,0x10,0x89,0x4D,0xF4,0x89,0x55,0xF8,0x89,0x45,0xFC,0xFF,0x75,0xEC,0xFF,0x75,0xF0,0xFF,0x75,0xF4,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x12,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x30,0xF1,0x7B,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x14,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x10,0x8B,0x45,0x08,0xC7,0x45,0x08,0xE0,0x34,0x7C,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF4,0x8B,0x48,0x08,0x89,0x55,0xF8,0x8B,0x50,0x0C,0x89,0x4D,0xF0,0x89,0x55,0xFC,0xB9,0x68,0xD3,0xAF,0x00,0x8B,0x45,0xF0,0x89,0x01,0x51,0x83,0xC1,0x04,0x8B,0x45,0xF4,0x89,0x01,0x8B,0x45,0xF8,0x89,0x41,0x04,0x51,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0xC7,0x45,0x08,0x60,0x13,0x7C,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xFC,0x89,0x55,0xF8,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x24,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x6A,0xFF,0x68,0x30,0x1D,0x44,0x00,0x64,0xA1,0x00,0x00,0x00,0x00,0x50,0x64,0x89,0x25,0x00,0x00,0x00,0x00,0x83,0xEC,0x0C,0x53,0x56,0x57,0x33,0xDB,0x68,0x14,0x44,0x45,0x00,0x68,0xE0,0xB3,0x44,0x00,0x8D,0x4C,0x24,0x34,0x89,0x5C,0x24,0x28,0xE8,0xF2,0x22,0x03,0x00,0x68,0x14,0x44,0x45,0x00,0x68,0xDC,0xB3,0x44,0x00,0x8D,0x4C,0x24,0x34,0xE8,0xDF,0x22,0x03,0x00,0x68,0x14,0x44,0x45,0x00,0x68,0xD8,0xB3,0x44,0x00,0x8D,0x4C,0x24,0x34,0xE8,0xCC,0x22,0x03,0x00,0x68,0xD4,0xB3,0x44,0x00,0x8D,0x4C,0x24,0x30,0xE8,0xCB,0x3A,0x03,0x00,0x8B,0xF0,0x8D,0x44,0x24,0x14,0x56,0x50,0x8D,0x4C,0x24,0x34,0xE8,0x22,0x25,0x03,0x00,0x8B,0x00,0x8D,0x4C,0x24,0x0C,0x51,0x68,0xCC,0xB3,0x44,0x00,0x50,0xE8,0x32,0xBE,0x01,0x00,0x83,0xC4,0x0C,0x8D,0x4C,0x24,0x14,0xE8,0x89,0x36,0x03,0x00,0x39,0x5C,0x24,0x0C,0x77,0x25,0x8D,0x4C,0x24,0x2C,0xC7,0x44,0x24,0x20,0xFF,0xFF,0xFF,0xFF,0xE8,0x72,0x36,0x03,0x00,0x5F,0x5E,0x33,0xC0,0x5B,0x8B,0x4C,0x24,0x0C,0x64,0x89,0x0D,0x00,0x00,0x00,0x00,0x83,0xC4,0x18,0xC3,0x8B,0x54,0x24,0x28,0x52,0x53,0x68,0xFF,0x0F,0x1F,0x00,0xFF,0x15,0xCC,0x32,0x44,0x00,0x8B,0xF8,0x3B,0xFB,0x75,0x25,0x8D,0x4C,0x24,0x2C,0xC7,0x44,0x24,0x20,0xFF,0xFF,0xFF,0xFF,0xE8,0x36,0x36,0x03,0x00,0x5F,0x5E,0x33,0xC0,0x5B,0x8B,0x4C,0x24,0x0C,0x64,0x89,0x0D,0x00,0x00,0x00,0x00,0x83,0xC4,0x18,0xC3,0x8B,0x4C,0x24,0x0C,0x55,0x8B,0x2D,0xC4,0x32,0x44,0x00,0x53,0x8D,0x44,0x24,0x18,0x6A,0x04,0x50,0x51,0x57,0xFF,0xD5,0x8B,0x54,0x24,0x30,0x8D,0x4C,0x24,0x30,0x8B,0x42,0xF8,0x2B,0xC6,0x48,0x50,0x8D,0x44,0x24,0x30,0x50,0xE8,0xF1,0x23,0x03,0x00,0x50,0x8D,0x4C,0x24,0x34,0xC6,0x44,0x24,0x28,0x01,0xE8,0xD0,0x36,0x03,0x00,0x8D,0x4C,0x24,0x2C,0x88,0x5C,0x24,0x24,0xE8,0xD6,0x35,0x03,0x00,0x68,0xD4,0xB3,0x44,0x00,0x8D]
    followPara = [0x0,0x0,0x00,0x00,0x3C,0x00,0x00,0x00,0x02,0x02,0x00,0x00,0x82,0x02,0x00,0x00,0x02,0x02,0x00,0x00,0x20,0xFE,0x0,0x00]

    walkCmd = [0x55,0x8B,0xEC,0x83,0xEC,0x18,0x8B,0x45,0x08,0x53,0x56,0xC7,0x45,0x08,0xA0,0x93,0x6C,0x00,0x8B,0x48,0x10,0x8B,0x50,0x14,0x89,0x4D,0xE8,0x8B,0x08,0x89,0x55,0xEC,0x8B,0x50,0x04,0x89,0x4D,0xF0,0x8B,0x48,0x08,0x89,0x55,0xF8,0x8B,0x50,0x0C,0x89,0x4D,0xF4,0x89,0x55,0xFC,0x6A,0x00,0x6A,0x00,0xBA,0x68,0xD3,0xAF,0x00,0x52,0xB8,0x78,0xD3,0xAF,0x00,0x50,0x3E,0x8B,0x0D,0x9C,0xFF,0xB6,0x00,0x8B,0xF1,0xBB,0x00,0x00,0x00,0x00,0x89,0x99,0x00,0x01,0x00,0x00,0x8B,0x5D,0xE8,0x89,0x1A,0xBB,0x00,0x00,0x00,0x00,0x89,0x5A,0x04,0x8B,0x5D,0xEC,0x89,0x5A,0x08,0xBB,0x00,0x00,0x00,0x00,0x89,0x5A,0x0C,0x8B,0x5D,0xF0,0x89,0x18,0x8B,0x5D,0xF4,0x89,0x58,0x04,0x8B,0x5D,0xF8,0x89,0x58,0x08,0x8B,0x5D,0xFC,0x89,0x58,0x0C,0x8B,0x5D,0x08,0xFF,0xD3,0x5E,0x5B,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x80,0xAE,0x42,0x00,0x8B,0x08,0x89,0x4D,0xFC,0x6A,0x01,0xFF,0x75,0xFC,0xB9,0xD0,0xB7,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x40,0xCE,0x82,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0x3E,0x8B,0x0D,0x6C,0x83,0xBD,0x00,0x8B,0x09,0x83,0xC1,0x08,0x8B,0x09,0x83,0xC1,0x08,0x8B,0x09,0x83,0xC1,0x08,0x8B,0x09,0x83,0xC1,0x04,0x8B,0x09,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0x53,0xC7,0x45,0x08,0x00,0xB4,0x6C,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF8,0x89,0x55,0xFC,0xBA,0x68,0xD3,0xAF,0x00,0x52,0x8B,0x5D,0xF8,0x89,0x1A,0xBB,0x00,0x00,0x00,0x00,0x89,0x5A,0x04,0x8B,0x5D,0xFC,0x89,0x5A,0x08,0xBB,0x00,0x00,0x00,0x00,0x89,0x5A,0x0C,0x3E,0x8B,0x0D,0x9C,0xFF,0xB6,0x00,0xFF,0x55,0x08,0x5B,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0xC7,0x45,0x08,0xE0,0xF1,0x7B,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF8,0x89,0x55,0xFC,0xFF,0x75,0xF8,0x6A,0x00,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0x56,0x57,0xC7,0x45,0x08,0x30,0xF1,0x7B,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF8,0x89,0x55,0xFC,0x8B,0x7D,0xF8,0x57,0xBE,0x00,0x00,0x00,0x00,0x56,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x5F,0x5E,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0xA0,0xFE,0x7B,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x0F,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x40,0xAF,0x42,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0xB9,0xD0,0xB7,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x10,0x8B,0x45,0x08,0xC7,0x45,0x08,0x40,0x9A,0x7C,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF8,0x8B,0x48,0x08,0x89,0x55,0xF4,0x8B,0x50,0x0C,0x89,0x4D,0xF0,0x89,0x55,0xFC,0xB8,0x38,0x38,0x38,0x38,0xB9,0x68,0xD3,0xAF,0x00,0x89,0x01,0x51,0xFF,0x75,0xF0,0xFF,0x75,0xF4,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x06,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0xC7,0x45,0x08,0x30,0xF7,0x7B,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xFC,0x89,0x55,0xF8,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x08,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x0C,0x8B,0x45,0x08,0xC7,0x45,0x08,0x30,0xF1,0x7B,0x00,0x8B,0x08,0x8B,0x50,0x04,0x8B,0x40,0x08,0x89,0x4D,0xF4,0x89,0x55,0xF8,0x89,0x45,0xFC,0xFF,0x75,0xF4,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x10,0x89,0x78,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x14,0x8B,0x45,0x08,0xC7,0x45,0x08,0x40,0x01,0x7C,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xEC,0x8B,0x48,0x08,0x89,0x55,0xF0,0x8B,0x50,0x0C,0x8B,0x40,0x10,0x89,0x4D,0xF4,0x89,0x55,0xF8,0x89,0x45,0xFC,0xFF,0x75,0xEC,0xFF,0x75,0xF0,0xFF,0x75,0xF4,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x12,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x30,0xF1,0x7B,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x14,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x10,0x8B,0x45,0x08,0xC7,0x45,0x08,0xE0,0x34,0x7C,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF4,0x8B,0x48,0x08,0x89,0x55,0xF8,0x8B,0x50,0x0C,0x89,0x4D,0xF0,0x89,0x55,0xFC,0xB9,0x68,0xD3,0xAF,0x00,0x8B,0x45,0xF0,0x89,0x01,0x51,0x83,0xC1,0x04,0x8B,0x45,0xF4,0x89,0x01,0x8B,0x45,0xF8,0x89,0x41,0x04,0x51,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3]

    walkSeqAddrList = [0xb6fb60, 0xb6fb68, 0xb6fb4c, 0xb6fb54] 
    
    moveCmd = [0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0xC7,0x45,0x08,0xE0,0xF1,0x7B,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF8,0x89,0x55,0xFC,0xFF,0x75,0xF8,0x6A,0x00,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0x56,0x57,0xC7,0x45,0x08,0x30,0xF1,0x7B,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF8,0x89,0x55,0xFC,0x8B,0x7D,0xF8,0x57,0xBE,0x00,0x00,0x00,0x00,0x56,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x5F,0x5E,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0xA0,0xFE,0x7B,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x0F,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x40,0xAF,0x42,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0xB9,0xD0,0xB7,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x10,0x8B,0x45,0x08,0xC7,0x45,0x08,0x40,0x9A,0x7C,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF8,0x8B,0x48,0x08,0x89,0x55,0xF4,0x8B,0x50,0x0C,0x89,0x4D,0xF0,0x89,0x55,0xFC,0xB8,0x38,0x38,0x38,0x38,0xB9,0x68,0xD3,0xAF,0x00,0x89,0x01,0x51,0xFF,0x75,0xF0,0xFF,0x75,0xF4,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x06,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0xC7,0x45,0x08,0x30,0xF7,0x7B,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xFC,0x89,0x55,0xF8,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x08,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x0C,0x8B,0x45,0x08,0xC7,0x45,0x08,0x30,0xF1,0x7B,0x00,0x8B,0x08,0x8B,0x50,0x04,0x8B,0x40,0x08,0x89,0x4D,0xF4,0x89,0x55,0xF8,0x89,0x45,0xFC,0xFF,0x75,0xF4,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x10,0x89,0x78,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x14,0x8B,0x45,0x08,0xC7,0x45,0x08,0x40,0x01,0x7C,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xEC,0x8B,0x48,0x08,0x89,0x55,0xF0,0x8B,0x50,0x0C,0x8B,0x40,0x10,0x89,0x4D,0xF4,0x89,0x55,0xF8,0x89,0x45,0xFC,0xFF,0x75,0xEC,0xFF,0x75,0xF0,0xFF,0x75,0xF4,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x12,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x30,0xF1,0x7B,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x14,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x10,0x8B,0x45,0x08,0xC7,0x45,0x08,0xE0,0x34,0x7C,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF4,0x8B,0x48,0x08,0x89,0x55,0xF8,0x8B,0x50,0x0C,0x89,0x4D,0xF0,0x89,0x55,0xFC,0xB9,0x68,0xD3,0xAF,0x00,0x8B,0x45,0xF0,0x89,0x01,0x51,0x83,0xC1,0x04,0x8B,0x45,0xF4,0x89,0x01,0x8B,0x45,0xF8,0x89,0x41,0x04,0x51,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0xC7,0x45,0x08,0x60,0x13,0x7C,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xFC,0x89,0x55,0xF8,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x24,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x6A,0xFF,0x68,0x30,0x1D,0x44,0x00,0x64,0xA1,0x00,0x00,0x00,0x00,0x50,0x64,0x89,0x25,0x00,0x00,0x00,0x00,0x83,0xEC,0x0C,0x53,0x56,0x57,0x33,0xDB,0x68,0x14,0x44,0x45,0x00,0x68,0xE0,0xB3,0x44,0x00,0x8D,0x4C,0x24,0x34,0x89,0x5C,0x24,0x28,0xE8,0xF2,0x22,0x03,0x00,0x68,0x14,0x44,0x45,0x00,0x68,0xDC,0xB3,0x44,0x00,0x8D,0x4C,0x24,0x34,0xE8,0xDF,0x22,0x03,0x00,0x68,0x14,0x44,0x45,0x00,0x68,0xD8,0xB3,0x44,0x00,0x8D,0x4C,0x24,0x34,0xE8,0xCC,0x22,0x03,0x00,0x68,0xD4,0xB3,0x44,0x00,0x8D,0x4C,0x24,0x30,0xE8,0xCB,0x3A,0x03,0x00,0x8B,0xF0,0x8D,0x44,0x24,0x14,0x56,0x50,0x8D,0x4C,0x24,0x34,0xE8,0x22,0x25,0x03,0x00,0x8B,0x00,0x8D,0x4C,0x24,0x0C,0x51,0x68,0xCC,0xB3,0x44,0x00,0x50,0xE8,0x32,0xBE,0x01,0x00,0x83,0xC4,0x0C,0x8D,0x4C,0x24,0x14,0xE8,0x89,0x36,0x03,0x00,0x39,0x5C,0x24,0x0C,0x77,0x25,0x8D,0x4C,0x24,0x2C,0xC7,0x44,0x24,0x20,0xFF,0xFF,0xFF,0xFF,0xE8,0x72,0x36,0x03,0x00,0x5F,0x5E,0x33,0xC0,0x5B,0x8B,0x4C,0x24,0x0C,0x64,0x89,0x0D,0x00,0x00,0x00,0x00,0x83,0xC4,0x18,0xC3,0x8B,0x54,0x24,0x28,0x52,0x53,0x68,0xFF,0x0F,0x1F,0x00,0xFF,0x15,0xCC,0x32,0x44,0x00,0x8B,0xF8,0x3B,0xFB,0x75,0x25,0x8D,0x4C,0x24,0x2C,0xC7,0x44,0x24,0x20,0xFF,0xFF,0xFF,0xFF,0xE8,0x36,0x36,0x03,0x00,0x5F,0x5E,0x33,0xC0,0x5B,0x8B,0x4C,0x24,0x0C,0x64,0x89,0x0D,0x00,0x00,0x00,0x00,0x83,0xC4,0x18,0xC3,0x8B,0x4C,0x24,0x0C,0x55,0x8B,0x2D,0xC4,0x32,0x44,0x00,0x53,0x8D,0x44,0x24,0x18,0x6A,0x04,0x50,0x51,0x57,0xFF,0xD5,0x8B,0x54,0x24,0x30,0x8D,0x4C,0x24,0x30,0x8B,0x42,0xF8]

    turnCmd = [0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0x53,0xC7,0x45,0x08,0x00,0xB4,0x6C,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF8,0x89,0x55,0xFC,0xBA,0x68,0xD3,0xAF,0x00,0x52,0x8B,0x5D,0xF8,0x89,0x1A,0xBB,0x00,0x00,0x00,0x00,0x89,0x5A,0x04,0x8B,0x5D,0xFC,0x89,0x5A,0x08,0xBB,0x00,0x00,0x00,0x00,0x89,0x5A,0x0C,0x3E,0x8B,0x0D,0x9C,0xFF,0xB6,0x00,0xFF,0x55,0x08,0x5B,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0xC7,0x45,0x08,0xE0,0xF1,0x7B,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF8,0x89,0x55,0xFC,0xFF,0x75,0xF8,0x6A,0x00,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0x56,0x57,0xC7,0x45,0x08,0x30,0xF1,0x7B,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF8,0x89,0x55,0xFC,0x8B,0x7D,0xF8,0x57,0xBE,0x00,0x00,0x00,0x00,0x56,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x5F,0x5E,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0xA0,0xFE,0x7B,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x0F,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x40,0xAF,0x42,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0xB9,0xD0,0xB7,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x10,0x8B,0x45,0x08,0xC7,0x45,0x08,0x40,0x9A,0x7C,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF8,0x8B,0x48,0x08,0x89,0x55,0xF4,0x8B,0x50,0x0C,0x89,0x4D,0xF0,0x89,0x55,0xFC,0xB8,0x38,0x38,0x38,0x38,0xB9,0x68,0xD3,0xAF,0x00,0x89,0x01,0x51,0xFF,0x75,0xF0,0xFF,0x75,0xF4,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x06,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0xC7,0x45,0x08,0x30,0xF7,0x7B,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xFC,0x89,0x55,0xF8,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x08,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x0C,0x8B,0x45,0x08,0xC7,0x45,0x08,0x30,0xF1,0x7B,0x00,0x8B,0x08,0x8B,0x50,0x04,0x8B,0x40,0x08,0x89,0x4D,0xF4,0x89,0x55,0xF8,0x89,0x45,0xFC,0xFF,0x75,0xF4,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x10,0x89,0x78,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x14,0x8B,0x45,0x08,0xC7,0x45,0x08,0x40,0x01,0x7C,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xEC,0x8B,0x48,0x08,0x89,0x55,0xF0,0x8B,0x50,0x0C,0x8B,0x40,0x10,0x89,0x4D,0xF4,0x89,0x55,0xF8,0x89,0x45,0xFC,0xFF,0x75,0xEC,0xFF,0x75,0xF0,0xFF,0x75,0xF4,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x12,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x30,0xF1,0x7B,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x14,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x10,0x8B,0x45,0x08,0xC7,0x45,0x08,0xE0,0x34,0x7C,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF4,0x8B,0x48,0x08,0x89,0x55,0xF8,0x8B,0x50,0x0C,0x89,0x4D,0xF0,0x89,0x55,0xFC,0xB9,0x68,0xD3,0xAF,0x00,0x8B,0x45,0xF0,0x89,0x01,0x51,0x83,0xC1,0x04,0x8B,0x45,0xF4,0x89,0x01,0x8B,0x45,0xF8,0x89,0x41,0x04,0x51,0xFF,0x75,0xFC,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0xC7,0x45,0x08,0x60,0x13,0x7C,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xFC,0x89,0x55,0xF8,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x24,0xB9,0x48,0xF9,0xB6,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x6A,0xFF,0x68,0x30,0x1D,0x44,0x00,0x64,0xA1,0x00,0x00,0x00,0x00,0x50,0x64,0x89,0x25,0x00,0x00,0x00,0x00,0x83,0xEC,0x0C,0x53,0x56,0x57,0x33,0xDB,0x68,0x14,0x44,0x45,0x00,0x68,0xE0,0xB3,0x44,0x00,0x8D,0x4C,0x24,0x34,0x89,0x5C,0x24,0x28,0xE8,0xF2,0x22,0x03,0x00,0x68,0x14,0x44,0x45,0x00,0x68,0xDC,0xB3,0x44,0x00,0x8D,0x4C,0x24,0x34,0xE8,0xDF,0x22,0x03,0x00,0x68,0x14,0x44,0x45,0x00,0x68,0xD8,0xB3,0x44,0x00,0x8D,0x4C,0x24,0x34,0xE8,0xCC,0x22,0x03,0x00,0x68,0xD4,0xB3,0x44,0x00,0x8D,0x4C,0x24,0x30,0xE8,0xCB,0x3A,0x03,0x00,0x8B,0xF0,0x8D,0x44,0x24,0x14,0x56,0x50,0x8D,0x4C,0x24,0x34,0xE8,0x22,0x25,0x03,0x00,0x8B,0x00,0x8D,0x4C,0x24,0x0C,0x51,0x68,0xCC,0xB3,0x44,0x00,0x50,0xE8,0x32,0xBE,0x01,0x00,0x83,0xC4,0x0C,0x8D,0x4C,0x24,0x14,0xE8,0x89,0x36,0x03,0x00,0x39,0x5C,0x24,0x0C,0x77,0x25,0x8D,0x4C,0x24,0x2C,0xC7,0x44,0x24,0x20,0xFF,0xFF,0xFF,0xFF,0xE8,0x72,0x36,0x03,0x00,0x5F,0x5E,0x33,0xC0,0x5B,0x8B,0x4C,0x24,0x0C,0x64,0x89,0x0D,0x00,0x00,0x00,0x00,0x83,0xC4,0x18,0xC3,0x8B,0x54,0x24,0x28,0x52,0x53,0x68,0xFF,0x0F,0x1F,0x00,0xFF,0x15,0xCC]

class CN:
    walkCmd = [0x55,0x8B,0xEC,0x83,0xEC,0x18,0x8B,0x45,0x08,0x53,0x56,0xC7,0x45,0x08,0xF0,0x58,0x6B,0x00,0x8B,0x48,0x10,0x8B,0x50,0x14,0x89,0x4D,0xE8,0x8B,0x08,0x89,0x55,0xEC,0x8B,0x50,0x04,0x89,0x4D,0xF0,0x8B,0x48,0x08,0x89,0x55,0xF8,0x8B,0x50,0x0C,0x89,0x4D,0xF4,0x89,0x55,0xFC,0x6A,0x00,0x6A,0x00,0xBA,0x00,0x0A,0xAE,0x00,0x52,0xB8,0x10,0x0A,0xAE,0x00,0x50,0x3E,0x8B,0x0D,0x68,0x1E,0xB5,0x00,0x8B,0xF1,0xBB,0x00,0x00,0x00,0x00,0x89,0x99,0x00,0x01,0x00,0x00,0x8B,0x5D,0xE8,0x89,0x1A,0xBB,0x00,0x00,0x00,0x00,0x89,0x5A,0x04,0x8B,0x5D,0xEC,0x89,0x5A,0x08,0xBB,0x00,0x00,0x00,0x00,0x89,0x5A,0x0C,0x8B,0x5D,0xF0,0x89,0x18,0x8B,0x5D,0xF4,0x89,0x58,0x04,0x8B,0x5D,0xF8,0x89,0x58,0x08,0x8B,0x5D,0xFC,0x89,0x58,0x0C,0x8B,0x5D,0x08,0xFF,0xD3,0x5E,0x5B,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x60,0xA3,0x42,0x00,0x8B,0x08,0x89,0x4D,0xFC,0x6A,0x01,0xFF,0x75,0xFC,0xB9,0xA0,0xD6,0xB4,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x60,0x42,0x81,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0x3E,0x8B,0x0D,0x64,0xC2,0xBD,0x00,0x8B,0x09,0x83,0xC1,0x08,0x8B,0x09,0x83,0xC1,0x08,0x8B,0x09,0x83,0xC1,0x08,0x8B,0x09,0x83,0xC1,0x04,0x8B,0x09,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0x53,0xC7,0x45,0x08,0x50,0x79,0x6B,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF8,0x89,0x55,0xFC,0xBA,0x00,0x0A,0xAE,0x00,0x52,0x8B,0x5D,0xF8,0x89,0x1A,0xBB,0x00,0x00,0x00,0x00,0x89,0x5A,0x04,0x8B,0x5D,0xFC,0x89,0x5A,0x08,0xBB,0x00,0x00,0x00,0x00,0x89,0x5A,0x0C,0x3E,0x8B,0x0D,0x68,0x1E,0xB5,0x00,0xFF,0x55,0x08,0x5B,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0xC7,0x45,0x08,0xF0,0x85,0x7A,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF8,0x89,0x55,0xFC,0xFF,0x75,0xF8,0x6A,0x00,0xFF,0x75,0xFC,0xB9,0x08,0x18,0xB5,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0x56,0x57,0xC7,0x45,0x08,0x40,0x85,0x7A,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF8,0x89,0x55,0xFC,0x8B,0x7D,0xF8,0x57,0xBE,0x00,0x00,0x00,0x00,0x56,0xFF,0x75,0xFC,0xB9,0x08,0x18,0xB5,0x00,0xFF,0x55,0x08,0x5F,0x5E,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0xB0,0x92,0x7A,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x0F,0xB9,0x08,0x18,0xB5,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x20,0xA4,0x42,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0xB9,0xA0,0xD6,0xB4,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x10,0x8B,0x45,0x08,0xC7,0x45,0x08,0x50,0x27,0x7B,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF8,0x8B,0x48,0x08,0x89,0x55,0xF4,0x8B,0x50,0x0C,0x89,0x4D,0xF0,0x89,0x55,0xFC,0xB8,0x38,0x38,0x38,0x38,0xB9,0x00,0x0A,0xAE,0x00,0x89,0x01,0x51,0xFF,0x75,0xF0,0xFF,0x75,0xF4,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x06,0xB9,0x08,0x18,0xB5,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x55,0x8B,0xEC,0x83,0xEC,0x08,0x8B,0x45,0x08,0xC7,0x45,0x08,0x40,0x8B,0x7A,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xFC,0x89,0x55,0xF8,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x08,0xB9,0x08,0x18,0xB5,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x0C,0x8B,0x45,0x08,0xC7,0x45,0x08,0x40,0x85,0x7A,0x00,0x8B,0x08,0x8B,0x50,0x04,0x8B,0x40,0x08,0x89,0x4D,0xF4,0x89,0x55,0xF8,0x89,0x45,0xFC,0xFF,0x75,0xF4,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0xB9,0x08,0x18,0xB5,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x70,0x41,0x77,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0xB9,0x08,0x18,0xB5,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x14,0x8B,0x45,0x08,0xC7,0x45,0x08,0x50,0x95,0x7A,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xEC,0x8B,0x48,0x08,0x89,0x55,0xF0,0x8B,0x50,0x0C,0x8B,0x40,0x10,0x89,0x4D,0xF4,0x89,0x55,0xF8,0x89,0x45,0xFC,0xFF,0x75,0xEC,0xFF,0x75,0xF0,0xFF,0x75,0xF4,0xFF,0x75,0xF8,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x12,0xB9,0x08,0x18,0xB5,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x51,0x8B,0x45,0x08,0xC7,0x45,0x08,0x40,0x85,0x7A,0x00,0x8B,0x08,0x89,0x4D,0xFC,0xFF,0x75,0xFC,0x6A,0x00,0x6A,0x14,0xB9,0x08,0x18,0xB5,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x55,0x8B,0xEC,0x83,0xEC,0x10,0x8B,0x45,0x08,0xC7,0x45,0x08,0xF0,0xC8,0x7A,0x00,0x8B,0x08,0x8B,0x50,0x04,0x89,0x4D,0xF4,0x8B,0x48,0x08,0x89,0x55,0xF8,0x8B,0x50,0x0C,0x89,0x4D,0xF0,0x89,0x55,0xFC,0xB9,0x00,0x0A,0xAE,0x00,0x8B,0x45,0xF0,0x89,0x01,0x51,0x83,0xC1,0x04,0x8B,0x45,0xF4,0x89,0x01,0x8B,0x45,0xF8,0x89,0x41,0x04,0x51,0xFF,0x75,0xFC,0xB9,0x08,0x18,0xB5,0x00,0xFF,0x55,0x08,0x8B,0xE5,0x5D,0xC3]
    
    seqAddrList = [0xb51a2c, 0x00B51A34, 0xb51a18, 0xb51a20]
    
area = TW

class MemException(Exception):
    pass

def getInt(proc, addr):
    '''获取4字节的内容
        return int
    '''
    buf = c_uint(0)
    bytesRead = c_ulong(0)
    bufferSize = 4    
    kernel32.ReadProcessMemory(proc.handle, addr, byref(buf), bufferSize, byref(bytesRead))
    return buf.value

def getByte(proc, addr):
    buf = c_ubyte()
    bytesRead = c_ulong(0)
    bufferSize = 1    
    kernel32.ReadProcessMemory(proc.handle, addr, byref(buf), bufferSize, byref(bytesRead))
    return buf.value

def Clean(proc):
    win32api.CloseHandle(proc)


def writeCmd(proc, cmdList):
    '''
    注意：如果成功，需要使用者自行释放内存
    '''
    size = 1024
    
    assert len(cmdList) == size
    cmd = (c_ubyte * size)()
    
    for i in range(size):
        cmd[i] = cmdList[i]
        
    buf = VirtualAllocEx(proc.handle, None, size, win32con.MEM_COMMIT, win32con.PAGE_READWRITE)
    if(buf == 0):
        raise MemException('VirtualAllocEx Fails')
    
    written = c_long(0) 
    ret = WriteProcessMemory(proc.handle, buf, byref(cmd), size, byref(written))
    
    if(written.value != size):
        ret = VirtualFreeEx(proc.handle, buf, 0, win32con.MEM_RELEASE)
        if (ret == 0):
            raise MemException("Release memory failed!")
        raise MemException("WriteProcessMemory() does NOT write the complete command!")
    if(ret == 0):
        ret = VirtualFreeEx(proc.handle, buf, 0, win32con.MEM_RELEASE)
        if (ret == 0):
            raise MemException("Release memory failed!")
        raise MemException('WriteProcessMemory() fails!')
    
    return buf

def writePara(proc, cPara):
    '''
    注意：如果成功，需要使用者自行释放内存
    '''
    size = 24
        
    buf = VirtualAllocEx(proc.handle, None, size, win32con.MEM_COMMIT, win32con.PAGE_READWRITE)
    if(buf == 0):
        raise MemException('VirtualAllocEx Fails')
    
    written = c_long(0) 
      
    ret = WriteProcessMemory(proc.handle, buf, byref(cPara), size, byref(written))
    
    if(written.value != size):
        ret = VirtualFreeEx(proc.handle, buf, 0, win32con.MEM_RELEASE)
        if (ret == 0):
            raise MemException("Release memory failed!")
        raise MemException("WriteProcessMemory() does NOT write the complete command!")
    if(ret == 0):
        ret = VirtualFreeEx(proc.handle, buf, 0, win32con.MEM_RELEASE)
        if (ret == 0):
            raise MemException("Release memory failed!")
        raise MemException('WriteProcessMemory() fails!')
    
    return buf

def execCmd(proc, cmdBuf, paraBuf):
    tHandle, tid = win32process.CreateRemoteThread(proc.handle, None, 0, cmdBuf, paraBuf, 0x4)
    print "Success! ThreadHandle, ThreadID = %d,%d" %( tHandle, tid)
    
    count = win32process.ResumeThread(tHandle)
    print "thread's previous suspend count = %d" %(count) 
    
    win32event.WaitForSingleObject(tHandle, -1)
    ret = win32api.CloseHandle(tHandle)
    if(ret == 0):
        raise MemException("Close handle failed!")
    
    ret = VirtualFreeEx(proc.handle, cmdBuf, 0, win32con.MEM_RELEASE)
    if(ret == 0):
        raise MemException("Release memory failed!")
    
    ret = VirtualFreeEx(proc.handle, paraBuf, 0, win32con.MEM_RELEASE)
    if(ret == 0):
        raise MemException("Release memory failed!")
    
    print "Cleaned"

def walk(proc, x, y):
    x = float(x)
    y = float(y)
    
    cmdBuf = writeCmd(proc, area.walkCmd)
    
    cpara = (c_ubyte * 24)()

    fpara = cast(cpara, POINTER(c_float))
    print "x=%f, y=%f" % (x,y)
    fpara[0] = x
    fpara[1] = y
    
    ipara = cast(cpara, POINTER(c_int))
    for i in range(4):
        ipara[i+2] = getInt(proc, area.walkSeqAddrList[i])
    for i in range(24):
        print "para = %x" % (cpara[i])
        
        
    paraBuf = writePara(proc, cpara)
    
        


    execCmd(proc, cmdBuf, paraBuf)
    

    
def follow(proc, id):
    #print len(area.followCmd)
    cmdBuf = writeCmd(proc, area.followCmd)
    
    paraSize = 24
    cpara = (c_ubyte * paraSize)()
    for i in range(len(area.followPara)):
        cpara[i] = area.followPara[i]
        
        
    p = cast(cpara, POINTER(c_int))
    #print cpara
    #print p
    
    p[0] = id    
    
    high = random.randrange(0x100,0x1FF) << 16
    p[5] += high
    #print p[4]
    #for i in range(6):
        #print p[i]
    
    for i in range(24):
        print "pp = %x" % (cpara[i])
        
    paraBuf = writePara(proc, cpara)

    execCmd(proc, cmdBuf, paraBuf)
    
def move(proc, id, moveto):
    print len(area.moveCmd)
    
    id = int(id)
    moveto = int(moveto)
        
    paraSize = 24
    cpara = (c_ubyte * paraSize)()
    ip = cast(cpara, POINTER(c_int))
    ip[0] = id
    ip[1] = moveto
    
    ip[2] = random.randrange(0xA40000, 0x0141FFFF)
    ip[3] = random.randrange(0x01410000, 0x01FFFFFF)
    ip[4] = random.randrange(0xA40000, 0x0141FFFF)
    ip[5] = random.randrange(0x01410000, 0x01FFFFFF)
    paraBuf = writePara(proc, cpara)
        
    cmdBuf = writeCmd(proc, area.moveCmd)
    
    execCmd(proc, cmdBuf, paraBuf)
    
    
def turn(proc, deg):
    '''
    以x轴正方向为0度，逆时针
    '''
    deg = float(deg)
    cos = math.cos(math.radians(deg))
    sin = -math.sin(math.radians(deg))
    
    paraSize = 24
    cpara = (c_ubyte * paraSize)()
    fp = cast(cpara, POINTER(c_float))
    fp[0] = cos
    fp[1] = sin
    
    ip = cast(cpara, POINTER(c_int))
    ip[2] = random.randrange(0xa40000, 0xef0000)
    ip[3] = random.randrange(0xef0000, 0xf0ffff)
    ip[4] = random.randrange(0xa4e900, 0xa4e9ff)
    ip[5] = random.randrange(0xef0000, 0xf0ffff)
    
    paraBuf = writePara(proc, cpara)
    cmdBuf = writeCmd(proc, area.turnCmd)
    
    execCmd(proc, cmdBuf, paraBuf)
